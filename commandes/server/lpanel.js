const { MessageEmbed } = require("discord.js"), 
fs = require("fs"), 
ms = require("ms"),
getNow = () => { return { time: new Date().toLocaleString("en-GB", { timeZone: "Europe/Paris", hour12: false, hour: "2-digit", minute: "2-digit", second: "2-digit" }), }; };

function update(message, db) {
    fs.writeFile(`./serveur/${message.guild.id}.json`, JSON.stringify(db), (x) => {
        if (x) console.error(x)
      });
};

module.exports.run = async (client, message, args) => {
    if(!message.guild) return;
    if(!message.member.hasPermission("ADMINISTRATOR")) return;
   let db = JSON.parse(fs.readFileSync(`./serveur/${message.guild.id}.json`, "utf8")),
   filter = (reaction, user) => ['âœ¨', 'ðŸ“¥','ðŸ”Š','ðŸ‘¤','ðŸ’­'].includes(reaction.emoji.name) && user.id === message.author.id,
   dureefiltrer = response => { return response.author.id === message.author.id };

   const msgembed = new MessageEmbed()
   .setAuthor(`ðŸ“š Modification of the parameters concerning the logs of ${message.guild.name}`)
   .setColor(db.color)
   .setFooter(`kodb`)
   .setDescription("`âœ¨`  Create a configuration for me\n`ðŸ“¥` Define the service entry log channel \n`ðŸ”Š` Define the voice movement logs \n`ðŸ‘¤`  Define the log channel about role \n`ðŸ’­` Define the message log channel\n\n>  Actual Configuration")
   .addField("`ðŸ“¥` Entry logs", db.logs.serveur, true)
   .addField("`ðŸ”Š` Voice logs", db.logs.vocal, true)
   .addField("`ðŸ‘¤` Roles logs", db.logs.role, true)
   .addField("`ðŸ’­` Messages logs", db.logs.message, true)
    message.channel.send(msgembed)
    .then(async m => { 
const collector = m.createReactionCollector(filter, { time: 900000 });
collector.on('collect', async r => { 
if(r.emoji.name === "âœ¨") { 
message.channel.send(`\`${getNow().time}\` âœ¨ Creation of the current logs category..`).then(msg => {
        m.guild.channels.create('Logs', {
            type: 'category',
            permissionsOverwrites: [{
              id: message.guild.id,
              deny: ['VIEW_CHANNEL']
            }]
        }).then(c => {
            c.guild.channels.create('join-leave', {
                type: 'text',
                parent: c.id,
                permissionOverwrites: [
                   {
                     id: message.guild.id,
                     deny: ['VIEW_CHANNEL']
                  },
                ],
              }).then(joinleave => {
            db.logs.serveur = joinleave.id
            c.guild.channels.create('vocaux', {
                type: 'text',
                parent: c.id,
                permissionOverwrites: [
                   {
                     id: message.guild.id,
                     deny: ['VIEW_CHANNEL']
                  },
                ],
              }).then(vocaux => {
            db.logs.vocal = vocaux.id
            c.guild.channels.create('role', {
                type: 'text',
                parent: c.id,
                permissionOverwrites: [
                   {
                     id: message.guild.id,
                     deny: ['VIEW_CHANNEL']
                  },
                ],
              }).then(role => {
            db.logs.role = role.id
            c.guild.channels.create('message', {
                type: 'text',
                parent: c.id,
                permissionOverwrites: [
                   {
                     id: message.guild.id,
                     deny: ['VIEW_CHANNEL']
                  },
                ],
              }).then(message => {
                db.logs.message = message.id
                update(message, db)
                m.edit({ embed: { author: { name: `ðŸ“š Modification of the parameters concerning the logs of ${message.guild.name}`}, color: db.color, description: "`âœ¨`  Create a configuration for me\n`ðŸ“¥` Define the service entry log channel \n`ðŸ”Š` Define the voice movement logs\n`ðŸ‘¤`  Define the log channel about role \n`ðŸ’­` Define the message log channel\n\n>  Actual Configuration" , fields: [ {name: "`ðŸ“¥` Entry logs", value: db.logs.serveur, inline: true }, { name: "`ðŸ”Š` Voice logs", value: db.logs.vocal, inline: true},{ name: "`ðŸ‘¤` Roles logs", value: db.logs.role, inline: true}, { name: "`ðŸ’­` Message logs", value: db.logs.message, inline: true}   ] } });         
                msg.edit(`\`${getNow().time}\` âœ¨ Creation of the log category successfully completed.`)
                  });
                });
            });
            });
        })
        // --
        });
} else if(r.emoji.name === "ðŸ“¥") {
    message.channel.send(`\`${getNow().time}\` ðŸ“¥ Please enter the Channel ID or write \`false\` to disable logs`).then(mp => {
        mp.channel.awaitMessages(dureefiltrer, { max: 1, time: 30000, errors: ['time'] })
        .then(cld => {
        var msg = cld.first();
        if(msg.content === "false") {
          db.logs.serveur = false
          message.channel.send(`\`${getNow().time}\` ðŸ“¥ You have disabled input logs`)
          update(message, db)
          m.edit({ embed: { author: { name: `ðŸ“š Modification of the parameters concerning the logs of ${message.guild.name}`}, color: db.color, description: "`âœ¨`  Create a configuration for me\n`ðŸ“¥` Define the service entry log channel \n`ðŸ”Š` Define the voice movement logs\n`ðŸ‘¤`  Define the log channel about role \n`ðŸ’­` Define the message log channel\n\n>  Actual Configuration" , fields: [ {name: "`ðŸ“¥` Entry logs", value: db.logs.serveur, inline: true }, { name: "`ðŸ”Š` Voice logs", value: db.logs.vocal, inline: true},{ name: "`ðŸ‘¤` Roles logs", value: db.logs.role, inline: true}, { name: "`ðŸ’­` Message logs", value: db.logs.message, inline: true}   ] } });         
        } else {  
        var channel = message.guild.channels.cache.get(msg.content)

        if(!channel) return  message.channel.send(`\`${getNow().time}\` ðŸ“¥ Incorrect Channel`)
        db.logs.serveur = channel.id
        message.channel.send(`\`${getNow().time}\` ðŸ“¥ You have changed the entry log channel to \`${channel.name}\``)
        update(message, db)
        m.edit({ embed: { author: { name: `ðŸ“š Modification of the parameters concerning the logs of ${message.guild.name}`}, color: db.color, description: "`âœ¨`  Create a configuration for me\n`ðŸ“¥` Define the service entry log channel \n`ðŸ”Š` Define the voice movement logs\n`ðŸ‘¤`  Define the log channel about role \n`ðŸ’­` Define the message log channel\n\n>  Actual Configuration" , fields: [ {name: "`ðŸ“¥` Entry logs", value: db.logs.serveur, inline: true }, { name: "`ðŸ”Š` Voice logs", value: db.logs.vocal, inline: true},{ name: "`ðŸ‘¤` Roles logs", value: db.logs.role, inline: true}, { name: "`ðŸ’­` Message logs", value: db.logs.message, inline: true}   ] } });         
        }
      });
        });
} else if(r.emoji.name === "ðŸ”Š") {
    message.channel.send(`\`${getNow().time}\` ðŸ”Š Please enter the channel ID or write \`false\` to disable logs`).then(mp => {
        mp.channel.awaitMessages(dureefiltrer, { max: 1, time: 30000, errors: ['time'] })
        .then(cld => {
        var msg = cld.first();

        if(msg.content === "false") {
          db.logs.vocal = false
          message.channel.send(`\`${getNow().time}\` ðŸ”Š You have deactivated the input logs`)
          update(message, db)
          m.edit({ embed: { author: { name: `ðŸ“š Modification of the parameters concerning the logs of ${message.guild.name}`}, color: db.color, description: "`âœ¨`  Create a configuration for me\n`ðŸ“¥` Define the service entry log channel \n`ðŸ”Š` Define the voice movement logs\n`ðŸ‘¤`  Define the log channel about role \n`ðŸ’­` Define the message log channel\n\n>  Actual Configuration" , fields: [ {name: "`ðŸ“¥` Entry logs", value: db.logs.serveur, inline: true }, { name: "`ðŸ”Š` Voice logs", value: db.logs.vocal, inline: true},{ name: "`ðŸ‘¤` Roles logs", value: db.logs.role, inline: true}, { name: "`ðŸ’­` Message logs", value: db.logs.message, inline: true}   ] } });                   
        } else {  
        var channel = message.guild.channels.cache.get(msg.content)
        if(!channel) return  message.channel.send(`\`${getNow().time}\` ðŸ”Š Incorrect Channel.`)
        db.logs.vocal = channel.id
        message.channel.send(`\`${getNow().time}\` ðŸ”Š You have changed the voice log channel to \`${channel.name}\``)
        update(message, db)
        m.edit({ embed: { author: { name: `ðŸ“š Modification of the parameters concerning the logs of ${message.guild.name}`}, color: db.color, description: "`âœ¨`  Create a configuration for me\n`ðŸ“¥` Define the service entry log channel \n`ðŸ”Š` Define the voice movement logs\n`ðŸ‘¤`  Define the log channel about role \n`ðŸ’­` Define the message log channel\n\n>  Actual Configuration" , fields: [ {name: "`ðŸ“¥` Entry logs", value: db.logs.serveur, inline: true }, { name: "`ðŸ”Š` Voice logs", value: db.logs.vocal, inline: true},{ name: "`ðŸ‘¤` Roles logs", value: db.logs.role, inline: true}, { name: "`ðŸ’­` Message logs", value: db.logs.message, inline: true}   ] } });                  
        }
      });
        });
} else if(r.emoji.name === "ðŸ‘¤") {
    message.channel.send(`\`${getNow().time}\` ðŸ‘¤ Please enter the Channel ID or write \`false\` to disable logs.`).then(mp => {
        mp.channel.awaitMessages(dureefiltrer, { max: 1, time: 30000, errors: ['time'] })
        .then(cld => {
        var msg = cld.first();
        
        if(msg.content === "false") {
          db.logs.role = false
          message.channel.send(`\`${getNow().time}\` ðŸ‘¤ You have disabled role logs`)
          update(message, db)
          m.edit({ embed: { author: { name: `ðŸ“š Modification of the parameters concerning the logs of ${message.guild.name}`}, color: db.color, description: "`âœ¨`  Create a configuration for me\n`ðŸ“¥` Define the service entry log channel \n`ðŸ”Š` Define the voice movement logs\n`ðŸ‘¤`  Define the log channel about role \n`ðŸ’­` Define the message log channel\n\n>  Actual Configuration" , fields: [ {name: "`ðŸ“¥` Entry logs", value: db.logs.serveur, inline: true }, { name: "`ðŸ”Š` Voice logs", value: db.logs.vocal, inline: true},{ name: "`ðŸ‘¤` Roles logs", value: db.logs.role, inline: true}, { name: "`ðŸ’­` Message logs", value: db.logs.message, inline: true}   ] } });               
        } else { 
        var channel = message.guild.channels.cache.get(msg.content)
        if(!channel) return  message.channel.send(`\`${getNow().time}\` ðŸ‘¤ Incorrect Channel.`)
        db.logs.role = channel.id
        message.channel.send(`\`${getNow().time}\` ðŸ‘¤ You have changed the role log channel to \`${channel.name}\``)
        update(message, db)
        m.edit({ embed: { author: { name: `ðŸ“š Modification of the parameters concerning the logs of ${message.guild.name}`}, color: db.color, description: "`âœ¨`  Create a configuration for me\n`ðŸ“¥` Define the service entry log channel \n`ðŸ”Š` Define the voice movement logs\n`ðŸ‘¤`  Define the log channel about role \n`ðŸ’­` Define the message log channel\n\n>  Actual Configuration" , fields: [ {name: "`ðŸ“¥` Entry logs", value: db.logs.serveur, inline: true }, { name: "`ðŸ”Š` Voice logs", value: db.logs.vocal, inline: true},{ name: "`ðŸ‘¤` Roles logs", value: db.logs.role, inline: true}, { name: "`ðŸ’­` Message logs", value: db.logs.message, inline: true}   ] } });                  
        }
      });
        });
} else if(r.emoji.name === "ðŸ’­") {
    message.channel.send(`\`${getNow().time}\` ðŸ’­ Please enter the Channel ID or write \`false\` to disable logs.`).then(mp => {
        mp.channel.awaitMessages(dureefiltrer, { max: 1, time: 30000, errors: ['time'] })
        .then(cld => {
        var msg = cld.first();
        if(msg.content === "false") {
          db.logs.message = false
          message.channel.send(`\`${getNow().time}\` ðŸ’­ You have disabled message logs`)
          update(message, db)
          m.edit({ embed: { author: { name: `ðŸ“š Modification of the parameters concerning the logs of ${message.guild.name}`}, color: db.color, description: "`âœ¨`  Create a configuration for me\n`ðŸ“¥` Define the service entry log channel \n`ðŸ”Š` Define the voice movement logs\n`ðŸ‘¤`  Define the log channel about role \n`ðŸ’­` Define the message log channel\n\n>  Actual Configuration" , fields: [ {name: "`ðŸ“¥` Entry logs", value: db.logs.serveur, inline: true }, { name: "`ðŸ”Š` Voice logs", value: db.logs.vocal, inline: true},{ name: "`ðŸ‘¤` Roles logs", value: db.logs.role, inline: true}, { name: "`ðŸ’­` Message logs", value: db.logs.message, inline: true}   ] } });                
        } else { 
        var channel = message.guild.channels.cache.get(msg.content)
        if(!channel) return  message.channel.send(`\`${getNow().time}\` ðŸ’­ Incorrect Channel.`)
        db.logs.message = channel.id
        message.channel.send(`\`${getNow().time}\` ðŸ’­ You have changed the message log channel to \`${channel.name}\``)
        update(message, db)
        m.edit({ embed: { author: { name: `ðŸ“š Modification of the parameters concerning the logs of ${message.guild.name}`}, color: db.color, description: "`âœ¨`  Create a configuration for me\n`ðŸ“¥` Define the service entry log channel \n`ðŸ”Š` Define the voice movement logs\n`ðŸ‘¤`  Define the log channel about role \n`ðŸ’­` Define the message log channel\n\n>  Actual Configuration" , fields: [ {name: "`ðŸ“¥` Entry logs", value: db.logs.serveur, inline: true }, { name: "`ðŸ”Š` Voice logs", value: db.logs.vocal, inline: true},{ name: "`ðŸ‘¤` Roles logs", value: db.logs.role, inline: true}, { name: "`ðŸ’­` Message logs", value: db.logs.message, inline: true}   ] } });           
        }
      });
        });
}
});
await m.react("âœ¨")
await m.react("ðŸ“¥")
await m.react("ðŸ”Š")
await m.react("ðŸ‘¤")
await m.react("ðŸ’­")
    });
};


module.exports.help = {
    name: "logs",
    aliases: ['lpanel','logspanel'],
    category: 'Gestion de serveur',
    description: "- Permet d'afficher le panel de configuration des logs.",
  };